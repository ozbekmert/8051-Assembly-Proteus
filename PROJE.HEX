FREEMODE 	BIT 40H
RUSHMODE    BIT 41H
STARTRUSH   BIT 42H
STARTMIN    BIT 43H
RD 			BIT P0.7
WR 			BIT P0.6
INTR 			BIT P0.5
TARGETTEMP  EQU 40H	; IN HEX
CURRENTTEMP EQU 41H	; IN HEX

ORG 0H
LJMP MAIN

ORG 03H
LJMP EXISR

ORG 0BH
LJMP T0ISR

ORG 23H
LJMP SERISR

ORG 30H
MAIN:
CLR P3.3
MOV TMOD, #21H ;TIMER 0-MODE 1, TIMER 1-MODE 2
MOV TH0, #4BH	; The inital value: 19454D = 4BFEH
MOV TL0, #0FEh	; then (65536 - 19454) * (12 / 11,0592 MHz) = 50 ms
MOV R0, #20 ; TO ITERATE TIMER 0 20 TIMES
MOV 50H, #5 ; TO 
MOV P2, #0FFH
SETB TCON.0

MOV TH1, #-3
MOV SCON, #50H

SETB FREEMODE
CLR RUSHMODE
CLR STARTRUSH
CLR STARTMIN

MOV R7,#30H ;MOST SIGNIFICANT DIGIT OF THE MINUTE
MOV R6,#30H
MOV R5,#30H ;LEAST SIGNIFICANT DIGIT OF THE MINUTE
MOV R2,#30H ;MOST SIGNIFICANT DIGIT OF THE SECONDS
MOV R1,#30H ;LEAST SIGNIFICANT DIGIT OF THE SECONDS

;THIS FIRST PART SENDS THE INITIALIZATION COMMANDS TO THE LCD
MOV A,#38H	;TWO LINES, 5X7 MATRIX
ACALL COMNWRT  ;WHEN SENDING A COMMAND, USE COMNWRT SUBROUTINE
MOV A,#0FH	;DISPLAY ON, CURSOR BLINKING
ACALL COMNWRT
MOV A,#01H	;CLEAR DISPLAY SCREEN
ACALL COMNWRT
MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
ACALL COMNWRT
MOV A,#0C0H
ACALL COMNWRT

ACALL RESETTIMER

SETB TR0
SETB TR1
SETB TF0
MOV IE, #10010011 ;ENABLE SERIAL INTERRUPT AND TIMER 0 INTERRUPT

SETB INTR

SJMP $	
;---------------------------------------------------------------------
; SUBROUTINES
;---------------------------------------------------------------------
; EXTERNAL INTERNAL INTERRUPTOR 0 ------------------------------------
EXISR:
	SETB RUSHMODE
	CLR TR1
	MOV IE, #10000011
	MOV 51H, TARGETTEMP      ;SAVED TARGETTEMP 
	MOV TARGETTEMP, #60
	MOV 60H, R1
	MOV 61H, R2
	MOV 62H, R5
	MOV 63H, R6
	MOV 64H, R7	
	MOV R7, #30H
	MOV R6, #30H
	MOV R5, #31H
	MOV R2, #30H
	MOV R1, #30H
	ACALL RESETTIMER	
RETI

; TIMER 0 INTERRUPTOR -------------------------------------------------
T0ISR: CLR TR0
	MOV TH0, #4BH
	MOV TL0, #0FEh 
	DJNZ R0, NOTZERO
	MOV R0, #20
JNB RUSHMODE, NOTRUSH
	DJNZ 50H, NOTZERO
	MOV 50H, #5
	ACALL READTEMP
	ACALL SHOWCURRENT
	ACALL COMPARETEMP
	ACALL SETHEATER
	JC NOTZERO                	;JUMP IF NOT REACHED TO 60 DEGREES
START: 
	CLR RUSHMODE
	MOV C, FREEMODE 
	MOV 10H, C                 ;SAVED FREE MODE ON 10H
	CLR FREEMODE
	SETB STARTRUSH
	LJMP EXIT

NOTRUSH: JNB FREEMODE, NOTFREE
	DJNZ 50H, NOTZERO
	MOV 50H, #5
	ACALL READTEMP
	ACALL SHOWCURRENT
NOTZERO:LJMP EXIT
	
NOTFREE: DJNZ 50H, COUNT
	MOV 50H, #5
	ACALL READTEMP
	ACALL SHOWCURRENT
	ACALL COMPARETEMP
	ACALL SETHEATER		

COUNT:
	CJNE R1, #30H, STEP0
	CJNE R2, #30H, STEP1
	CJNE R5, #30H, NEXT2
	CJNE R6, #30H, NEXT3
	CJNE R7, #30H, NEXT4
	JB STARTRUSH, FINRUSH
	SETB FREEMODE
	CLR P3.3
	CLR P0.4
	LJMP EXIT

STEP0: LJMP NEXT0
STEP1: LJMP NEXT1	
	
FINRUSH: MOV C, 10H
	MOV FREEMODE, C
	MOV TARGETTEMP, 51H 
	CLR STARTRUSH
	MOV R1, 60H
	MOV R2, 61H
	MOV R5, 62H
	MOV R6, 63H
	MOV R7, 64H
	ACALL RESETTIMER
	MOV IE, #10010011
	SETB TR1
	LJMP EXIT	
		
	NEXT4: MOV A, #0C0H
	ACALL COMNWRT
	DEC R7
	MOV R1, #39H
	MOV R2, #35H
	MOV R5, #39H
	MOV R6, #39H	 
	MOV A, R7     
	ACALL DATAWRT  									
	MOV A, R6	
	ACALL DATAWRT				
	MOV A, R5
	ACALL DATAWRT					
	MOV A,#':'
	ACALL DATAWRT				
	MOV A, R2
	ACALL DATAWRT
	MOV A, R1
	ACALL DATAWRT
	SJMP EXIT
						
	NEXT3: MOV A, #0C1H
	ACALL COMNWRT
	DEC R6
	MOV R1, #39H
	MOV R2, #35H
	MOV R5, #39H
	MOV A, R6
	ACALL DATAWRT				
	MOV A, R5
	ACALL DATAWRT					
	MOV A,#':'
	ACALL DATAWRT				
	MOV A, R2
	ACALL DATAWRT
	MOV A, R1
	ACALL DATAWRT
	SJMP EXIT
				
	NEXT2: MOV A, #0C2H
	ACALL COMNWRT
	DEC R5
	MOV R1, #39H
	MOV R2, #35H
	MOV A, R5
	ACALL DATAWRT					
	MOV A,#':'
	ACALL DATAWRT				
	MOV A, R2
	ACALL DATAWRT
	MOV A, R1
	ACALL DATAWRT
	SJMP EXIT
						
	NEXT1: MOV A, #0C4H
	ACALL COMNWRT 
	DEC R2
	MOV R1, #39H
	MOV A, R2
	ACALL DATAWRT
	MOV A, R1
	ACALL DATAWRT
	SJMP EXIT
				
	NEXT0: MOV A, #0C5H
	ACALL COMNWRT
	DEC R1
	MOV A, R1
	ACALL DATAWRT
EXIT:SETB TR0
	RETI

COMPARETEMP:   ;sýcaklýðýn target temperature civarýnda olup olmadýðýna bakacak ve Carry flag'i deðiþtirecek
	MOV A,TARGETTEMP
	ADD A,#2
	MOV 45H ,A			;UPPER BORDER
	SUBB A,#04
	MOV 46H,A         ;LOWER BORDER
	CLR A
	MOV A,CURRENTTEMP
	MOV B,46H
	CJNE A,B,BNM
BNM:JC,KLJ           ;JUMP IF CURRENT IS LESS THAN LOWER BORDER
	MOV B,45H
	CJNE A,B,BNM1
BNM1:JNC KLJ2        ;JUMP IF CURRENT IS NOT LESS THAN UPPER BORDER
	CLR C
	RET
KLJ:SETB C
	RET
KLJ2: RET
	
READTEMP:
	CLR WR
	SETB WR				;STARTS CONVERSION
CYC1: JB INTR, CYC1;WAÝT UNTÝL ALL DATA ÝS SEND
	CLR RD				;END OF CONVERSION
	MOV CURRENTTEMP, P2;TRANSFER DATA TO ACC
	SETB RD				;TO GET READY FOR NEXT INPUT
	RET
	
SHOWCURRENT:       ;SHOW CURRENT TEMPERATURE
	MOV DPTR, #TEMP
	ACALL ASK
	MOV A, CURRENTTEMP
	MOV B, #10
	DIV AB
	ADD A, #30H
	ACALL DATAWRT
	MOV A, TARGETTEMP
	MOV A, B
	ADD A, #30H
	ACALL DATAWRT
	RET
	
SETHEATER:     ;carry flag 1 ise LED yakacak ve sýcaklýðý artýracak
	JNC OFF
	SETB P3.3
	CLR P0.4
	SJMP ER
OFF:CLR P3.3
	SETB P0.4
ER:RET
	
; SERIAL INTERRUPTOR ------------------------------------------------
SERISR: ;THIS SUBROUTINE IS FOR SERIAL INTERRUPT
	JNB TI, REC
	CLR TI
	RETI
REC:
	PUSH ACC
	PUSH PSW
	MOV A, SBUF
	JNB 00H, PASS
	MOV 30H, A            	;READING TEMP VALUE MOST SIGNIFICANT DIGIT
	CLR 00H
	SETB 01H
	POP PSW
	POP ACC
	CLR RI 
	RETI
PASS: JNB 01H, PASS2
	MOV 31H, A              ;READING TEMP VALUE LEAST SIGNIFICANT DIGIT
	CLR 01H	
	ACALL CHECKTEMP         ;CHECK THE VALIDITY
	JNC OKTEMP                  ;NO CARRY MEANS VALID
	MOV DPTR, #INVALID
	ACALL ASK
	ACALL DELAY
	SETB 00H
	MOV DPTR, #TEMPMESS
	LJMP FINREC
OKTEMP:					         ;IF VALID TEMP VALUE...
	ACALL SHOWTEMP
	MOV IE, #10010011			;VALID INPUT IS ENTERED, TIMER CAN START
	SETB TR0
	LJMP F
PASS2: JNB 02H, PASS3
	MOV 32H, A              ;READING MIN VALUE MOST SIGNIFICANT DIGIT
	CLR 02H
	SETB 03H
	POP PSW
	POP ACC
	CLR RI 
	RETI
PASS3: JNB 03H, PASS4
	MOV 33H, A              ;READING MIN VALUE SECOND SIGNIFICANT DIGIT
	CLR 03H	
	SETB 04H
	POP PSW
	POP ACC
	CLR RI 
	RETI
PASS4: JNB 04H, PASS5
	MOV 34H, A              ;READING MIN VALUE LEAST SIGNIFICANT DIGIT
	CLR 04H
	ACALL CHECKMIN          ;CHECK THE VALIDITY
	JNC OKMIN                  ;NO CARRY MEANS VALID
	MOV DPTR, #INVALID
	ACALL ASK
	ACALL DELAY
	SETB 02H
	MOV DPTR, #MINMESS
	SJMP FINREC
OKMIN:				            ;IF VALID MIN VALUE...
	ACALL SHOWMIN
	MOV IE, #10010011			;VALID INPUT IS ENTERED, TIMER CAN START	
	SETB TR0
	SJMP F 	
PASS5:CJNE A, #'C', NOTC
	CLR FREEMODE
	ACALL CHECKZERO			; kontrol et zaman ve sýcaklýk deðerleri girilmiþ mi girilmemiþse TEMP=30, MIN=5
	SETB TR0
	SJMP F	
NOTC:CJNE A, #'c', NOT_c
	CLR FREEMODE
	ACALL CHECKZERO			; kontrol et zaman ve sýcaklýk deðerleri girilmiþ mi girilmemiþse TEMP=30, MIN=5
	SETB TR0
	SJMP F
NOT_c:CJNE A, #'T', NOTT
	MOV DPTR, #TEMPMESS
	SETB 00H 					;TEMPERATURE VALUE WILL BE ENTERED
	MOV IE, #10010000       ;DISABLE TIMER0
	CLR TR0
	SJMP FINREC
NOTT: CJNE A, #'t', NOT_t
	MOV DPTR, #TEMPMESS
	SETB 00H
	MOV IE, #10010000
	CLR TR0
	SJMP FINREC
NOT_t: CJNE A, #'M', NOTM
	MOV DPTR, #MINMESS
	SETB 02H	              	;MINUTE VALUE WILL BE ENTERED
	MOV IE, #10010000
	CLR TR0
	SJMP FINREC
NOTM: CJNE A, #'m', F
	MOV DPTR, #MINMESS
	SETB 02H
	MOV IE, #10010000
	CLR TR0
	SJMP FINREC 
FINREC:
	ACALL ASK
F:	POP PSW
	POP ACC
	CLR RI
	RETI
	
CHECKZERO:
	CJNE R7, #30H, NOTZ
	CJNE R6, #30H, NOTZ
	CJNE R5, #30H, NOTZ
	CJNE R2, #30H, NOTZ
	CJNE R1, #30H, NOTZ
   MOV R7, #30H
	MOV R6, #30H
	MOV R5, #35H
NOTZ:MOV A, TARGETTEMP
	JNZ NOTTEMP
	MOV TARGETTEMP, #30
NOTTEMP: RET

	

CHECKTEMP: ;THIS SUBROUTINE IS TO CHECK VALIDITY OF THE INPUT ENTERED FOR THE TEMPERATURE
	MOV A,30H
	ANL A,#0FH
	MOV B,#10
	MUL AB
	MOV B,A
	MOV A,31H
	ANL A,#0FH
	ADD A,B
	CJNE A,#24, JUMPD
JUMPD:JNC , JUMPF
	SETB C
	RET
JUMPF:CJNE A,#61, JUMPD1
JUMPD1:JC , JUMP
	SETB C
	RET
JUMP:CLR C
	MOV TARGETTEMP, A		
	RET

CHECKMIN: ;THIS SUBROUTINE IS TO CHECK VALIDITY OF THE INPUT ENTERED FOR THE MINUTE
	CLR A
	MOV A,32H
	CJNE A,#30H, DOWN
DOWN:JNC , DFG
	RET
DFG:CJNE A,#3AH, DOWN1
DOWN1:JC , DFG1
	SETB C
	RET
DFG1:
	;MOV 32H,A
	CLR A
	MOV A,33H
	CJNE A,#30H , DOWN2
DOWN2:JNC , DFG2
	RET
DFG2:
	CJNE A,#3AH , DOWN3
DOWN3:JC , DFG3
	SETB C
	RET
DFG3:
	;MOV 33H,A
	CLR A
	MOV A,34H
	CJNE A,#30H , DOWN4
DOWN4:JNC , DFG4
	RET
DFG4:
	CJNE A,#3AH , DOWN5
DOWN5:JC , DFG5
	SETB C
	RET
DFG5:CLR C 
	;MOV 34H,A
	RET
;----------------------------------------------------------------------------------	
SHOWTEMP: ;THIS SUBROUTINE IS TO DISPLAY VALID TEMPERATURE ENTERY
	MOV DPTR, #TEMP
	ACALL ASK
	MOV A, TARGETTEMP
	MOV B, #10
	DIV AB
	ADD A, #30H
	ACALL DATAWRT
	MOV A, TARGETTEMP
	MOV A, B
	ADD A, #30H
	ACALL DATAWRT
	RET

SHOWMIN: ;THIS SUBROUTINE IS TO DISPLAY VALID TEMPERATURE ENTERY
   ACALL CHECKLESS	
   MOV DPTR, #MIN
   ACALL ASK
	MOV A, R7
	ANL A, #0FH
	ADD A, #30H
	ACALL DATAWRT
	MOV A, R6
	ANL A, #0FH
	ADD A, #30H
	ACALL DATAWRT
	MOV A, R5
	ANL A, #0FH
	ADD A, #30H
	ACALL DATAWRT
	ACALL RESETTIMER
	RET

CHECKLESS:
	JNB STARTMIN, SMALLER 
	MOV A, R7
	CJNE A, 32H, NOTEQ100
	MOV A, R6
	CJNE A, 33H, NOTEQ10
	MOV A, R5
	CJNE A, 32H, NOTEQ1
	SJMP EXITCOMP
NOTEQ100: JNC SMALLER
	SJMP EXITCOMP
NOTEQ10: JNC SMALLER
	SJMP EXITCOMP
NOTEQ1: JNC SMALLER
SMALLER: MOV R7, 32H
	MOV R6, 33H
	MOV R5, 34H
	MOV R2, #30H
	MOV R1, #30H
	SETB STARTMIN
EXITCOMP: RET


	
RESETTIMER:
	MOV A, #0C0H
	ACALL COMNWRT
	MOV A, R7     
	ACALL DATAWRT  									
	MOV A, R6	
	ACALL DATAWRT				
	MOV A, R5
	ACALL DATAWRT					
	MOV A,#':'
	ACALL DATAWRT				
	MOV A, R2
	ACALL DATAWRT
	MOV A, R1
	ACALL DATAWRT
	RET
	
ASK:	;THIS SUBROUTINE IS TO ASK FOR TEMPERATURE WHEN 'T' OR 't' IS ENTERED, ASK FOR MINITE WHEN 'M' OR 'm' IS ENTERED
	PUSH ACC
	MOV A,#080H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	ACALL COMNWRT
ASKBACK:	CLR A
   MOVC A, @A+DPTR
   INC DPTR
   JZ FINTEMP
   ACALL DATAWRT
	SJMP ASKBACK
FINTEMP: POP ACC 
	RET
;-----------------------------------------------------------------------------------
;P1.0-P1.7 ARE CONNECTED TO LCD DATA PINS D0-D7
;P3.5 IS CONNECTED TO RS PIN 
;P3.6 IS CONNECTED TO R/W PIN
;P3.7 IS CONNECTED TP E PIN			
COMNWRT:    ;THIS  SUBROUTINE IS FOR SENDING THE COMMANDS TO LCD
	MOV P1,A    ;THE COMMAND IS STORED IN A, SEND IT TO LCD
	CLR P3.5    ;RS=0 BEFORE SENDING COMMAND
	CLR P3.6    ;R/W=0 TP WRITE
	SETB P3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	ACALL DELAY
	CLR P3.7
	ACALL DELAY
	RET

DATAWRT:    ;THIS  SUBROUTINE IS FOR SENDING THE DATA TO BE DISPLAYED
	MOV P1,A    ;SEND THE DATA STORED IN A TO LCD
	SETB P3.5   ;RS=1 BEFORE SENDING DATA
	CLR P3.6 	;R/W=0 TP WRITE
	SETB P3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	ACALL DELAY
	CLR P3.7
	ACALL DELAY
	RET

DELAY:		;THIS SUBROUTINE IS TO CREATE ENOUGH TIME FOR LCD TO OPERATE
	MOV R3,#50
HERE2: MOV R4,#255
HERE: DJNZ R4,HERE
	DJNZ R3,HERE2
	RET
;------------------------------------------------------------------------------------
; SAVED MESSAGES
TEMPMESS:DB "Enter Temp:",0
MINMESS: DB "Enter Min: ",0
ERROR: 	DB "Try Again! ",0
INVALID: DB "Invalid!   ",0
TEMP:    DB	"Temp.:   ",0
MIN:		DB "Min. :  ",0
	
	END

		



